# Copyright (C) 2015 David Gao <davidgao1001@gmail.com>
#
# This program is free software; you can redistribute  it and/or modify it
# under  the terms of  the GNU General  Public License as published by the
# Free Software Foundation;  either version 2 of the  License, or (at your
# option) any later version.

# Makefile for ARMv7A-LE

######## BEGIN CONFIG ########
CROSS_COMPILE	=  arm-unknown-eabi-

MACH		=  zynq7000
BOARD		=  zedboard
########  END  CONFIG ########

ROOTDIR		=  $(shell pwd)
UPPERMACH	=  $(shell echo $(MACH) | tr a-z- A-Z_)

M4		=  m4
CC		=  $(CROSS_COMPILE)gcc
CPP		=  $(CROSS_COMPILE)cpp
LD		=  $(CROSS_COMPILE)ld
OBJDUMP		=  $(CROSS_COMPILE)objdump
OBJCOPY		=  $(CROSS_COMPILE)objcopy

INCFLAG		=  -I. -I./include -I./include/arch/$(ARCH)
INCFLAG		+= -I./include/arch/$(ARCH)/asm/mach-$(MACH)

CFLAGS		=  -Wall -fno-builtin -nostdinc -nostdlib -march=armv7-a
CFLAGS		+= -mlittle-endian $(INCFLAG) -DMACH_$(UPPERMACH)

LDFLAGS		=  -EL -O -N

FIRMWARE_OBJS	=  firmware/arch/$(ARCH)/vector.o \
		   firmware/arch/$(ARCH)/bootasm.o \
		   firmware/arch/$(ARCH)/bootmain.o \
			$(DRIVER_OBJS) \

FIRMWARE_M4	=  firmware/arch/$(ARCH)/firmware.m4 \
		   firmware/arch/$(ARCH)/$(MACH)/chip.m4 \
		   firmware/arch/$(ARCH)/$(MACH)/$(BOARD)/board.m4

MBR_OBJS	=   boot/arch/$(ARCH)/$(MACH)/vector.o \
				boot/arch/$(ARCH)/$(MACH)/bootmain.o


DRIVER_OBJS = drivers/misc/dtb-zynq7000.o \
		   drivers/serial/uart-zynq7000.o \
		   drivers/serial/uart.o \
		   drivers/clock/gtc-a9mpcore.o \
		   drivers/sd/sd-zynq7000.o

#HIGH_EXEC_OBJS = kern/init/high_exec.o \
#			kern/mm/memory.o \
#			$(DRIVER_OBJS)

#LOW_EXEC_OBJS = kern/mm/mmu.o \
#				kern/init/low_exec.o
			
KERN_OBJS = kern/init/high_exec.o \
			$(DRIVER_OBJS) \
			kern/mm/memory.o \
			kern/mm/mmu.o \
			kern/kernel.o \
			kern/init/low_exec.o \
			kern/exception/interrupt.o \
			kern/exception/interrupt_asm.o \
			kern/kernel_entry.o \
			kern/sched/process.o \
			kern/sched/scheduler.o
			

all: firmware.bin mbr.bin kernel.elf

$(FIRMWARE_OBJS): EXTRA_CFLAGS = -O2

firmware.ld: $(FIRMWARE_M4)
	$(M4) firmware/arch/$(ARCH)/firmware.m4 \
	-I firmware/arch/$(ARCH)/$(MACH)/ \
	-I firmware/arch/$(ARCH)/$(MACH)/$(BOARD)/ > $@

firmware.elf: $(FIRMWARE_OBJS) firmware.ld
	$(LD) $(LDFLAGS) -T firmware.ld -o $@ $(FIRMWARE_OBJS)
	rm -rf firmware.ld

$(MBR_OBJS): EXTRA_CFLAGS := -Os

mbr.elf: $(MBR_OBJS) boot/arch/$(ARCH)/$(MACH)/mbr.ld
	$(LD) $(LDFLAGS) -T boot/arch/$(ARCH)/$(MACH)/mbr.ld -o $@ $^

$(KERN_OBJS) : EXTRA_CFLAGS := -ggdb

kernel.elf: $(KERN_OBJS) kern/kernel.ld
	$(LD) $(LDFLAGS) -T kern/kernel.ld -o $@ $(KERN_OBJS)

#low_exec.elf: $(LOW_EXEC_OBJS) kern/init/ldscript.ld
#	$(LD) $(LDFLAGS) -T kern/init/ldscript.ld -o $@ $^

#high_exec.elf: $(HIGH_EXEC_OBJS) kern/init/ldscript.ld
#	$(LD) $(LDFLAGS) -T kern/init/ldscript.ld -o $@ $^

clean:
	rm -f firmware.ld
	rm -rf $(FIRMWARE_OBJS) firmware.elf firmware.bin firmware.s
	rm -rf $(MBR_OBJS) mbr.elf mbr.bin mbr.s
	rm -rf $(KERN_OBJS) kernel.elf
	rm -rf $(DRIVER_OBJS)

.S.o:
	$(CC) $(CFLAGS) $(EXTRA_CFLAGS) -o $@ -c $<

.c.o:
	$(CC) $(CFLAGS) $(EXTRA_CFLAGS) -o $@ -c $<

%.s: %.elf
	$(OBJDUMP) -S $^ > $@

%.bin: %.elf
	$(OBJCOPY) -O binary -S $^ $@

.PHONY: clean
